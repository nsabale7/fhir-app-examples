map "http://worldhealthorganization.github.io/smart-ot/StructureMap/MeaslesQuestionnaireToResources" = "MeaslesQuestionnaireToResources"
uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QuestionnaireResponse as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias MeaslesCIFBundle as target


uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" alias QuestionnaireResponse as source
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias MeaslesLogicalModel as target

uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles" alias MeaslesLogicalModel as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias MeaslesCIFBundle as target
uses "http://worldhealthorganization.github.io/smart-ot/StructureDefinition/MeaslesCIFComposition" alias MeaslesCIFComposition as target


group MeaslesQuestionnaireToResources(source qr : QuestionnaireResponse, target bundleCif : MeaslesCIFBundle) {
  qr -> create ("http://worldhealthorganization.github.io/smart-ot/StructureDefinition/SOTMeasles") as model then {
  qr -> model then MeaslesQuestionnaireToLogicalModel(qr,model) "QRtoLM";
  qr -> bundleCif then MeaslesLogicalModelToResources (model, bundleCif) "LMtoBundle";
  } "QRtoBundle";
}


group MeaslesQuestionnaireToLogicalModel(source qr : QuestionnaireResponse, target measlesLm : SOTMeasles) {
  qr.item as item where linkId.value in ('investigationForm') -> measlesLm as measlesLm then mapInvestigationForm(item, measlesLm) "set Investigation form";
}

group mapInvestigationForm(source investigationForm, target measlesLm : SOTMeasles) {
  investigationForm.item as qrReportingSource where linkId.value in ('reportingSource') -> measlesLm.ReportingSource as lmReportingSource then mapReportingSource(qrReportingSource, lmReportingSource) "set Reporting Source";
  investigationForm.item as qrDemographics where linkId.value in ('demographics') -> measlesLm.Demographics as lmDemographics then mapDemographics(qrDemographics, lmDemographics) "set Demographics";
  investigationForm.item as qrVaccinationStatus where linkId.value in ('vaccinationStatus') -> measlesLm.VaccinationStatus as lmVaccinationStatus then mapVaccinationStatus(qrVaccinationStatus, lmVaccinationStatus) "set Vaccination Status";
  investigationForm.item as qrClinical where linkId.value in ('clinical') -> measlesLm.Clinical as lmClinical then mapClinical(qrClinical, lmClinical) "set Clinical";
  investigationForm.item as qrLaboratoryResults where linkId.value in ('laboratoryResults') -> measlesLm.LaboratoryResults as lmLaboratoryResults then mapLaboratoryResults(qrLaboratoryResults, lmLaboratoryResults) "set Laboratory Results";
  investigationForm.item as qrContactTracing where linkId.value in ('contactTracing') -> measlesLm.ContactTracing as lmContactTracing then mapContactTracing(qrContactTracing, lmContactTracing) "set Contact Tracing";
  investigationForm.item as qrEpiData where linkId.value in ('epiData') -> measlesLm.EpiData as lmEpiData then mapEpiData(qrEpiData, lmEpiData) "set Epi Data";
  investigationForm.item as qrClassification where linkId.value in ('classification') -> measlesLm.Classification as lmClassification then mapClassification(qrClassification, lmClassification) "set Classification";
}

group mapReportingSource(source qrReportingSource, target lmReportingSource : ReportingSourceLogicalModel) {
  qrReportingSource.item as initialDiagnosis where linkId.value in ('initialDiagnosis') -> lmReportingSource.InitialDiagnosis = (initialDiagnosis.answer.value) "set Initial Diagnosis";
  qrReportingSource.item as reportedBy where linkId.value in ('reportedBy') -> lmReportingSource.ReportedBy = (reportedBy.answer.value) "set case ID";
  qrReportingSource.item as qrReportingInstitution where linkId.value in ('reportingInstitution') -> lmReportingSource as lmReportingSource then mapReportingInstitution(qrReportingInstitution, lmReportingSource) "set reporting institution";
  qrReportingSource.item as dateOfConsultation where linkId.value in ('DateOfConsultation') -> lmReportingSource.DateOfConsultation = (dateOfConsultation.answer.value) "set date of consultation";
  qrReportingSource.item as dateOfHomeVisit where linkId.value in ('DateOfHomeVisit') -> lmReportingSource.DateOfHomeVisit = (dateOfHomeVisit.answer.value) "set date of home visit";
  qrReportingSource.item as dateReportedLocal where linkId.value in ('dateReported') -> lmReportingSource.DateReportedLocal = (dateReportedLocal.answer.value) "set date reported local";
  qrReportingSource.item as dateReportedNational where linkId.value in ('DateReportedNational') -> lmReportingSource.DateReportedNational = (dateReportedNational.answer.value) "set date reported national";
  qrReportingSource.item as providerType where linkId.value in ('TypeOfProviderReporting') -> lmReportingSource.TypeOfProviderReporting = (providerType.answer.value) "set provider type";
  qrReportingSource.item as detectedBy where linkId.value in ('DetectedBy') -> lmReportingSource.DetectedBy = (detectedBy.answer.value) "set provider type";
}

group mapReportingInstitution(source qrReportingInstitution, target lmReportingSource : ReportingSourceLogicalModel) {
  qrReportingInstitution.item as reportingFacility where linkId.value in ('reportingFacility') -> lmReportingSource.HealthServiceName = (reportingFacility.answer.value) "set health facility name";
  qrReportingInstitution.item as telephone where linkId.value in ('telephone') -> create('ContactPoint') as lmTelephone, lmTelephone.value = (telephone.answer.value), lmReportingSource.HealthServiceTelephone = lmTelephone "set telephone";
  qrReportingInstitution -> create('Address') as lmAddress then {
  qrReportingInstitution.item as country where linkId.value in ('country') -> lmAddress.country= (country.answer.value) "set country";
  qrReportingInstitution.item as municipality where linkId.value in ('municipality') -> lmAddress.city = (municipality.answer.value) "set city";
  qrReportingInstitution.item as state where linkId.value in ('state') -> lmAddress.state = (state.answer.value) "set state";
  qrReportingInstitution.item as locality where linkId.value in ('locality') -> lmAddress.district = (locality.answer.value) "set locality";
  qrReportingInstitution -> lmReportingSource.PlaceOfReporting = lmAddress "assign address";
  } "set address";
}


group mapDemographics(source qrDemographics, target lmDemographics : SOTMeaslesDemographic) {
  qrDemographics.item as name        where linkId.value in ('name')            -> create('HumanName') as lmName, lmName.family=(name.answer.value), lmDemographics.Name =lmName  "set name";
  qrDemographics.item as guardian    where linkId.value in ('guardian')        -> create('HumanName') as lmGuardian,lmGuardian.family=(guardian.answer.value), lmDemographics.Guardian = lmGuardian "set guardian";
  qrDemographics.item as address     where linkId.value in ('address')         -> create('Address') as lmAddress, lmAddress.text=(address.answer.value), lmDemographics.PlaceOfResidence = lmAddress "set address";
  qrDemographics.item as telephone   where linkId.value in ('telephone')       -> create('ContactPoint') as lmTelephone, lmTelephone.value=(telephone.answer.value), lmDemographics.Telephone = lmTelephone "set telephone";
  qrDemographics.item as landmark    where linkId.value in ('landmark')        -> lmDemographics.Landmark = (landmark.answer.value) "set landmark";
  qrDemographics.item as occupation  where linkId.value in ('occupation')      -> lmDemographics.Occupation = (occupation.answer.value) "set occupation";
  qrDemographics.item as location  where linkId.value in ('location living in') -> lmDemographics.LocalityType = (location.answer.value) "set Locality Type";
  qrDemographics.item as workAddress where linkId.value in ('workAddress')     -> create('Address') as lmAddress, lmAddress.text=(workAddress.answer.value), lmDemographics.WorkAddress = lmAddress "set workAddress";
  qrDemographics.item as sex         where linkId.value in ('sex')             -> lmDemographics.Sex = (sex.answer.value) "set sex";
  qrDemographics.item as DoB         where linkId.value in ('DoB')             -> lmDemographics.DateOfBirth = (DoB.answer.value) "set DoB";
  qrDemographics.item as ageOnset    where linkId.value in ('ageOnset')        -> create('Quantity') as lmAgeOnset, lmAgeOnset.value =(ageOnset.answer.valueInteger), lmDemographics.Age = lmAgeOnset  "set ageOnset";
}

group mapVaccinationStatus(source qrVaccinationStatus, target lmVaccinationStatus: VaccinationStatusLogicalModel)
{
  qrVaccinationStatus.item as lastDoseDate where linkId.value in ('lastDoseDate') -> lmVaccinationStatus.LastDoseDate = (lastDoseDate.answer.value) "set Last Dose Date";
  qrVaccinationStatus.item as sourceOfInformation where linkId.value in ('sourceOfInformation') -> lmVaccinationStatus.Source = (sourceOfInformation.answer.value) "set Source of Vaccination Information";
  qrVaccinationStatus.item as noOfDoses where linkId.value in ('noOfDoses') -> lmVaccinationStatus.NumberOfDoses = (noOfDoses.answer.value) "set number of doses";
  qrVaccinationStatus.item as vaccineType where linkId.value in ('vaccineType') -> lmVaccinationStatus.VaccineType = (vaccineType.answer.value) "set vaccine type";
}

group mapClinical(source qrClinical, target lmClinical: ClinicalLogicalModel) {
  qrClinical.item as fever where linkId.value in ('fever') -> lmClinical.Fever = (fever.answer.value) "set Fever";
  qrClinical.item as temperature where linkId.value in ('temperature') -> lmClinical.Temperature = (temperature.answer.valueDecimal) "set Temperature";
  qrClinical.item as dateOfFeverOnset where linkId.value in ('dateOfFeverOnset') -> lmClinical.FeverOnsetDate = (dateOfFeverOnset.answer.value) "set Date of Fever Onset";
  qrClinical.item as rash where linkId.value in ('rash') -> lmClinical.Rash = (rash.answer.value) "set Rash";
  qrClinical.item as rashType where linkId.value in ('rashType') -> lmClinical.TypeOfRash = (rashType.answer.value) "set Rash Type";
  qrClinical.item as rashDuration where linkId.value in ('rashDuration') -> lmClinical.DurationOfRash = (rashDuration.answer.valueInteger) "set Rash Duration";
  qrClinical.item as rashOnsetDate where linkId.value in ('rashOnsetDate') -> lmClinical.RashOnsetDate = (rashOnsetDate.answer.value) "set Rash Onset Date";
  qrClinical.item as cough where linkId.value in ('cough') -> lmClinical.Cough = (cough.answer.value) "set Cough";
  qrClinical.item as conjunctivitis where linkId.value in ('conjunctivitis') -> lmClinical.Conjunctivitis = (conjunctivitis.answer.value) "set Conjunctivitis";
  qrClinical.item as coryza where linkId.value in ('coryza') -> lmClinical.Coryza = (coryza.answer.value) "set Coryza";
  qrClinical.item as koplikSpots where linkId.value in ('koplikSpots') -> lmClinical.KoplikSpots = (koplikSpots.answer.value) "set Koplik Spots";
  qrClinical.item as lymphadenopathy where linkId.value in ('lymphadenopathy') -> lmClinical.Lymphadenopathy = (lymphadenopathy.answer.value) "set Lymphadenopathy";
  qrClinical.item as jointPain where linkId.value in ('jointPain') -> lmClinical.JointPain = (jointPain.answer.value) "set Arthralgia";
  qrClinical.item as pregnancy where linkId.value in ('pregnancy') -> lmClinical.PregnancyStatus = (pregnancy.answer.value) "set Pregnant";
  qrClinical.item as monthsPregnant where linkId.value in ('monthsPregnant') -> lmClinical.GestationWeeks = (monthsPregnant.answer.valueInteger) "set Pregnancy Weeks";
  qrClinical.item as placeOfBirth where linkId.value in ('placeOfBirth') -> lmClinical.IntentedBirthPlacce = (placeOfBirth.answer.value) "set Place of Birth";
  qrClinical.item as admitted where linkId.value in ('admitted') -> lmClinical.HistoryOfHospitalization = (admitted.answer.value) "set Hospitalized";
  qrClinical.item as admittedHCFName where linkId.value in ('admittedHCFName') -> lmClinical.HospitalName = (admittedHCFName.answer.value) "set Hospital Name";
  qrClinical.item as admissionDate where linkId.value in ('admissionDate') -> lmClinical.DateOfAdmission = (admissionDate.answer.value) "set Admission Date";
  qrClinical.item as hospitalRecordNumber where linkId.value in ('hospitalRecordNumber') -> lmClinical.HospitalRecordNumber = (hospitalRecordNumber.answer.value) "set Hospital Record Number";
  qrClinical.item as outcome where linkId.value in ('outcome') -> lmClinical.Outcome = (outcome.answer.value) "set Outcome";
  qrClinical.item as diseaseAdditionalInfo where linkId.value in ('diseaseAdditionalInfo') -> lmClinical.Comments = (diseaseAdditionalInfo.answer.value) "set Comments";
}

group mapLaboratoryResults(source qrLaboratoryResults, target lmLaboratoryResults: LaboratoryResultsLogicalModel) {
  qrLaboratoryResults.item as specimenNumber where linkId.value in ('specimenNumber') -> lmLaboratoryResults.SpecimenNumber = (specimenNumber.answer.value) "set SpecimenNumber";
  qrLaboratoryResults.item as sampleType where linkId.value in ('sampleType') -> lmLaboratoryResults.SampleType = (sampleType.answer.value) "set SampleType";
  qrLaboratoryResults.item as collectionDate where linkId.value in ('collectionDate') -> lmLaboratoryResults.SpecimenCollectionDate = (collectionDate.answer.value) "set SpecimenCollectionDate";
  qrLaboratoryResults.item as labName where linkId.value in ('labName') -> lmLaboratoryResults.LabName = (labName.answer.value) "set Shipment Date";
  qrLaboratoryResults.item as specimenSentDate where linkId.value in ('specimenSentDate') -> lmLaboratoryResults.SpecimenSentDate = (specimenSentDate.answer.value) "set SpecimenSentDate";
  qrLaboratoryResults.item as specimenReceivedDate where linkId.value in ('specimenReceivedDate') -> lmLaboratoryResults.SpecimenRecdDate = (specimenReceivedDate.answer.value) "set SpecimenRecdDate";
  qrLaboratoryResults.item as sampleId where linkId.value in ('sampleId') -> lmLaboratoryResults.SampleId = (sampleId.answer.value) "set SampleId";
  qrLaboratoryResults.item as testPerformed where linkId.value in ('testPerformed') -> lmLaboratoryResults.TypeOfTest = (testPerformed.answer.value) "set TypeOfTest";
  qrLaboratoryResults.item as antigen where linkId.value in ('antigen') -> lmLaboratoryResults.Antigen = (antigen.answer.value) "set Antigen";
  qrLaboratoryResults.item as result where linkId.value in ('result') -> lmLaboratoryResults.Results = (result.answer.value) "set Results";
  qrLaboratoryResults.item as resultDate where linkId.value in ('resultDate') -> lmLaboratoryResults.LabResultsDate = (resultDate.answer.value) "set LabResultsDate  ";
  qrLaboratoryResults.item as specifyVirus where linkId.value in ('specifyVirus') -> lmLaboratoryResults.ViralGenotype = (specifyVirus.answer.value) "set specify virus";

}

group mapContactTracing(source qrContactTracing, target lmContactTracing: ContactTracingLogicalModel) {

}

group mapEpiData(source qrEpiData, target lmEpiData: EpiDataLogicalModel) {

}

group mapClassification(source qrClassification, target lmClassification: ClassificationLogicalModel) {
  qrClassification.item as finalClassification where linkId.value in ('finalClassification') -> lmClassification.FinalClassification = (finalClassification.answer.value) "set finalClassification";
  qrClassification.item as confirmationBasis where linkId.value in ('confirmationBasis') -> lmClassification.ConfirmationBasis = (confirmationBasis.answer.value) "set confirmationBasis";
  qrClassification.item as source where linkId.value in ('source') -> lmClassification.Source = (source.answer.value) "set source";
  qrClassification.item as countryImportation where linkId.value in ('countryImportation') -> lmClassification.CountryImportation = (countryImportation.answer.value) "set countryImportation";
  qrClassification.item as discardingBasis where linkId.value in ('discardingBasis') -> lmClassification.DiscardingBasis = (discardingBasis.answer.value) "set discardingBasis";
  qrClassification.item as contact where linkId.value in ('contact') -> lmClassification.Contact = (contact.answer.value) "set contact";
  qrClassification.item as contactCaseNo where linkId.value in ('contactCaseNo') -> lmClassification.ContactCaseNo = (contactCaseNo.answer.value) "set contactCaseNo";
  qrClassification.item as classifiedBy where linkId.value in ('classifiedBy') -> lmClassification.ClassifiedBy = (classifiedBy.answer.value) "set classifiedBy";
  qrClassification.item as classificationDate where linkId.value in ('classificationDate') -> lmClassification.ClassificationDate = (classificationDate.answer.value) "set classificationDate";
}

group addressToAddress (source sourceAddress, target targetAddress: Address) {
  sourceAddress.use as use -> targetAddress.use = use "Copy use";
  sourceAddress.type as type -> targetAddress.type = type "Copy type";
  sourceAddress.text as text -> targetAddress.text = text "Copy text";
  sourceAddress.line as line -> targetAddress.line = line "Copy line";
  sourceAddress.city as city -> targetAddress.city = city "Copy city";
  sourceAddress.district as district -> targetAddress.district = district "Copy district";
  sourceAddress.state as state -> targetAddress.state = state "Copy state";
  sourceAddress.postalCode as postalCode -> targetAddress.postalCode = postalCode "Copy postalCode";
  sourceAddress.country as country -> targetAddress.country = country "Copy country";

  // Copy the period using the previously defined group function
  sourceAddress.period as sourcePeriod -> targetAddress.period as targetPeriod then {
    sourcePeriod -> sourcePeriod then periodToPeriod(sourcePeriod, targetPeriod) "Copy period";
  } "copy period";
}

group humanNameToHumanName (source sourceName, target targetName: HumanName) {
  sourceName.use as use -> targetName.use = use "Copy use";
  sourceName.text as text -> targetName.text = text "Copy text";
  sourceName.family as family -> targetName.family = family "Copy family";
  sourceName.given as given -> targetName.given = given "Copy given";
  sourceName.prefix as prefix -> targetName.prefix = prefix "Copy prefix";
  sourceName.suffix as suffix -> targetName.suffix = suffix "Copy suffix";

  // Copy the period using the previously defined group function
  sourceName.period as sourcePeriod -> targetName.period as targetPeriod then {
    sourcePeriod -> sourcePeriod then periodToPeriod(sourcePeriod, targetPeriod) "Copy period";
  } "copy period";
}

group periodToPeriod (source sourcePeriod , target targetPeriod: Period) {
  sourcePeriod.start as start -> targetPeriod.start = start "set period start";
  sourcePeriod.end as end -> targetPeriod.end = end "set period end";
}

group contactPointToContactPoint (source sourceContact, target targetContact: ContactPoint) {
  sourceContact.system as system -> targetContact.system = system "Copy system";
  sourceContact.value as value -> targetContact.value = value "Copy value";
  sourceContact.use as use -> targetContact.use = use "Copy use";
  sourceContact.rank as rank -> targetContact.rank = rank "Copy rank";

  // Copy the period using the previously defined group function
  sourceContact.period as sourcePeriod -> targetContact.period as targetPeriod then {
    sourcePeriod -> sourcePeriod then periodToPeriod(sourcePeriod, targetPeriod) "Copy period";
  } "copy period";
}

group MeaslesLogicalModelToResources(source lm : SOTMeasles, target bundle : Bundle) {
  lm -> bundle.type = 'document' "set bundle type";
  /*
  lm.ReportingSource as reportingSource -> reportingSource then {
     reportingSource.DateReportedNational as date -> bundle.timestamp = date "set date";
    } "set timestamp";
    */
  lm -> uuid() as bid, bundle.id = bid "set id";
  lm -> uuid() as cid, uuid() as pid, uuid() as prid, uuid() as oid, uuid() as eid  then {
    lm -> bundle.entry as entry,  entry.resource = create('Composition') as composition,  entry.fullUrl = append('urn:uuid:', cid) then {
    lm -> lm then LmToComposition(lm, composition,  cid,  pid,  prid,  oid,  eid ) "set";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', pid), create('Patient') as patient then {
    lm.Demographics as demographics -> demographics then DemographicsToPatient(demographics, patient, pid) "create patient";
    lm -> entry.resource = patient "set patient as entry";
    } "map patient resource";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', prid), create('Practitioner') as practitioner then {
    lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToPractitioner(reportingSource, practitioner, prid) "create practitioner";
    lm -> entry.resource = practitioner "set practitioner as entry";
    } "map practitioner resource" ;
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', oid), create('Organization') as organization then {
    lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToOrganization(reportingSource, organization, oid) "create organization";
    lm -> entry.resource = organization "set organization as entry";
    } "map organization resource";
    lm -> bundle.entry as entry, entry.fullUrl = append('urn:uuid:', eid), create('Encounter') as encounter then {
    lm.ReportingSource as reportingSource -> reportingSource then ReportingSourceToEncounter(reportingSource, encounter, eid) "create encounter";
    lm -> entry.resource = encounter "set encounter as entry";
    } "map encounter resource";
    lm -> lm then mapClinicalToObservations (lm, bundle, composition, pid) "set clinical data";
 /*   lm -> composition.section as section then {
      lm -> section.title = "labs" "set lab data";
      lm -> section.code "set code";
      lm.LaboratoryResults as labs -> labs then mapLabsToObservations (labs, bundle, section, pid) "set labs data";
    } "set lab section"; */
  } "map composition resource";
  } "set entries" ;
}

group mapClinicalToObservations(source lm : SOTMeasles, target bundle: Bundle, target composition: Composition, source pid) {
  lm -> composition.section as section, section.title = "Clinical Data, Follow up and Treatment" then {
    lm.Clinical as clinical -> clinical then {
      clinical.Fever as fever -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        fever -> observation.id = obsid "set obsid";
        fever -> create('Coding') as coding, coding.code = "45701-0", coding.system = "https://loinc.org", coding.display = "Fever" then {
          fever -> fever then createObservationResource(fever, coding, observation, pid) "set obs";
        } "set obs";
      } "set fever";

      clinical.TypeOfRash as haemorrhagic where code.exists() -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        haemorrhagic -> observation.id = obsid "set obsid";
        haemorrhagic -> create('Coding') as coding, coding.code = "45702-7", coding.system = "https://loinc.org", coding.display = "Haemorrhagic" then {
          haemorrhagic -> haemorrhagic then createObservationResource(haemorrhagic, coding, observation, pid) "set obs";
        } "set obs";
      } "set haemorrhagic";

      clinical.TypeOfRash as erythematous where code.exists() -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        erythematous -> observation.id = obsid "set obsid";
        erythematous -> create('Coding') as coding, coding.code = "45703-5", coding.system = "https://loinc.org", coding.display = "Erythematous" then {
          erythematous -> erythematous then createObservationResource(erythematous, coding, observation, pid) "set obs";
        } "set obs";
      } "set erythematous";

      clinical.TypeOfRash as vesicularPustular where code.exists() -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        vesicularPustular -> observation.id = obsid "set obsid";
        vesicularPustular -> create('Coding') as coding, coding.code = "45704-3", coding.system = "https://loinc.org", coding.display = "Vesicular Pustular" then {
          vesicularPustular -> vesicularPustular then createObservationResource(vesicularPustular, coding, observation, pid) "set obs";
        } "set obs";
      } "set vesicularPustular";

      clinical.TypeOfRash as petechialPurpuric where code.exists() -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        petechialPurpuric -> observation.id = obsid "set obsid";
        petechialPurpuric -> create('Coding') as coding, coding.code = "45705-0", coding.system = "https://loinc.org", coding.display = "Petechial Purpuric" then {
          petechialPurpuric -> petechialPurpuric then createObservationResource(petechialPurpuric, coding, observation, pid) "set obs";
        } "set obs";
      } "set petechialPurpuric";

      clinical.TypeOfRash as other where code.exists() -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        other -> observation.id = obsid "set obsid";
        other -> create('Coding') as coding, coding.code = "45706-8", coding.system = "https://loinc.org", coding.display = "Rash" then {
          other -> other then createObservationResource(other, coding, observation, pid) "set obs";
        } "set obs";
      } "set other";

      clinical.Cough as cough -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        cough -> observation.id = obsid "set obsid";
        cough -> create('Coding') as coding, coding.code = "45707-6", coding.system = "https://loinc.org", coding.display = "Cough" then {
          cough -> cough then createObservationResource(cough, coding, observation, pid) "set obs";
        } "set obs";
      } "set cough";

      clinical.Conjunctivitis as conjunctivitis -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        conjunctivitis -> observation.id = obsid "set obsid";
        conjunctivitis -> create('Coding') as coding, coding.code = "45708-4", coding.system = "https://loinc.org", coding.display = "Conjunctivitis" then {
          conjunctivitis -> conjunctivitis then createObservationResource(conjunctivitis, coding, observation, pid) "set obs";
        } "set obs";
      } "set conjunctivitis";

      clinical.Coryza as coryza -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        coryza -> observation.id = obsid "set obsid";
        coryza -> create('Coding') as coding, coding.code = "45709-2", coding.system = "https://loinc.org", coding.display = "Coryza" then {
          coryza -> coryza then createObservationResource(coryza, coding, observation, pid) "set obs";
        } "set obs";
      } "set coryza";

      clinical.KoplikSpots as koplikSpots -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        koplikSpots -> observation.id = obsid "set obsid";
        koplikSpots -> create('Coding') as coding, coding.code = "45710-0", coding.system = "https://loinc.org", coding.display = "Koplik Spots" then {
          koplikSpots -> koplikSpots then createObservationResource(koplikSpots, coding, observation, pid) "set obs";
        } "set obs";
      } "set koplikSpots";

      clinical.Lymphadenopathy as lymphadenopathy -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        lymphadenopathy -> observation.id = obsid "set obsid";
        lymphadenopathy -> create('Coding') as coding, coding.code = "45711-8", coding.system = "https://loinc.org", coding.display = "Lymphadenopathy" then {
          lymphadenopathy -> lymphadenopathy then createObservationResource(lymphadenopathy, coding, observation, pid) "set obs";
        } "set obs";
      } "set lymphadenopathy";

      clinical.JointPain as jointPain -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        jointPain -> observation.id = obsid "set obsid";
        jointPain -> create('Coding') as coding, coding.code = "45712-6", coding.system = "https://loinc.org", coding.display = "Joint Pain" then {
          jointPain -> jointPain then createObservationResource(jointPain, coding, observation, pid) "set obs";
        } "set obs";
      } "set jointPain";

      clinical.PregnancyStatus as pregnancy -> uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference = append('Observation/', obsid), entry.resource = create('Observation') as observation then {
        pregnancy -> observation.id = obsid "set obsid";
        pregnancy -> create('Coding') as coding, coding.code = "45713-4", coding.system = "https://loinc.org", coding.display = "Pregnancy" then {
          pregnancy -> pregnancy then createObservationResource(pregnancy, coding, observation, pid) "set obs";
        } "set obs";
      } "set pregnancy";

    } "set clinical";
  } "set section";
}



group createObservationResource(source src, source coding: Coding, target observation : Observation, source pid) {
 src -> create('CodeableConcept') as code, code.coding = coding, observation.code = code "set code";
 src -> observation.value = src "set value";
 src -> observation.status  = "registered" "set status";
 src -> observation.subject as subject then {
 src -> subject.reference = append('Patient/',pid) "set subject";
 } "set subject";
}
group mapLabsToObservations(source labs : MeaslesLabs, target bundle: Bundle, target section: Section, source pid) {
 /*labs ->  uuid() as obsid, bundle.entry as entry, entry.fullUrl = append('urn:uuid:', obsid), section.entry as sectionEntry, sectionEntry.reference =append('Observation/', obsid), create('Observation') as observation then {
    labs -> labs then ClinicalToObservationEntries(clinical, observation, obsid, pid) "create observation";
    labs -> entry.resource = observation "set observation as entry";
 }*/
}


group LmToComposition(source lm : SOTMeasles, target composition : Composition, source cid, source pid, source prid, source oid, source eid) {
  cid -> composition.id = cid "set id";
  lm -> composition.status = "final" "set status";
  lm -> composition.title = "PAHO Measles Case Investigation Form" "set title";
  lm -> create('Coding') as coding, coding.code = "55751-2", coding.system = "http://loinc.org", coding.display = "Public health Case report", create('CodeableConcept') as code, code.coding = coding,  composition.type = code "set type";
  /*
  lm.ReportingSource as reportingSource -> reportingSource then {
    reportingSource.DateReportedLocal as date -> composition.date = date "set date";
  } "set date reported local";
  */
  lm -> composition.subject as subject then {
    lm -> subject.reference= append('Patient/',pid) "set subject";
  } "set subject";
  lm -> composition.author as practitioner then {
    lm -> practitioner.reference = append('Practitioner/', prid) "set author practitioner";
  } "set author practitioner";
  lm -> composition.author as institution then {
    lm -> institution.reference = append('Organization/', oid) "set author institution";
  } "set author org";
  lm -> composition.encounter as encounter then {
    lm -> encounter.reference = append ('Encounter/', eid) "set encounter";
  } "set encounter";
}


group DemographicsToPatient(source demographics:DemographicsLogicalModel , target patient: MeaslesPatient, source pid) {
 pid -> patient.id = pid "set patient id";
 demographics.Name as sourceName -> patient.name as targetName then {
  sourceName -> sourceName then humanNameToHumanName(sourceName, targetName) "Copy name";
 } "Set name";
 demographics.DateOfBirth as dob -> patient.birthDate = dob "set date of birth";
 demographics.Sex as sex -> patient.gender = sex "set sex";
 demographics.CountryOfBirth as cob -> patient.CountryOfBirth = cob "set CountryOfBirth";
 demographics.Landmark as landmark -> patient.extension as ext then {
  landmark -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Landmark' , ext.value = landmark "set landmark value";
 } "set landmark";
 demographics.Guardian as guardian -> patient.extension as ext then {
  guardian -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Guardian' , ext.value = guardian "set guardian value";
 } "set guardian";

demographics.Telephone as sourcePhone -> patient.telecom as targetPhone then {
  sourcePhone -> sourcePhone then contactPointToContactPoint(sourcePhone, targetPhone) "Copy contact";
 } "Set contact";

 demographics.PlaceOfResidence as sourceAddress -> patient.address as targetAddress then {
  sourceAddress -> sourceAddress then addressToAddress(sourceAddress,targetAddress) "Copy Address";
 } "set address";

 demographics.Occupation as occupation -> patient.extension as ext then {
  occupation -> ext.url ='http://worldhealthorganization.github.io/smart-ot/StructureDefinition/Occupation', ext.value = occupation "set occupation value";
 } "set occupation";
 demographics.WorkAddress as workAddress -> patient.extension as ext then {
 workAddress -> ext.url = 'http://worldhealthorganization.github.io/smart-ot/StructureDefinition/WorkAddress', ext.value = workAddress "set work address value";
 } "set work address";
}

group ReportingSourceToPractitioner (source reportingSource: ReportingSourceLogicalModel, target practitioner: Practitioner, source prid) {
prid -> practitioner.id = prid "set id";
reportingSource.ReportedBy as name -> practitioner.name as humanName, humanName.text = name "set name";
}

group ReportingSourceToOrganization (source reportingSource: ReportingSourceLogicalModel, target organization: Organization, source oid) {
oid -> organization.id = oid "set id";
reportingSource.HealthServiceName as name -> organization.name = name "set name";
reportingSource.HealthServiceTelephone as phoneSource -> organization.contact as contactDetails, contactDetails.telecom as phoneTarget then {
  phoneSource -> phoneSource then contactPointToContactPoint(phoneSource, phoneTarget) "set org contact";
} "set phone";

reportingSource.PlaceOfReporting as locationSource -> organization.contact as contactDetails, contactDetails.address as locationTarget then {
  locationSource -> locationSource then contactPointToContactPoint(locationSource, locationTarget) "set org address";
} "set address";

}

group ReportingSourceToEncounter (source reportingSource: ReportingSourceLogicalModel, target encounter: Encounter, source eid) {
eid -> encounter.id = eid "set id";
/*
reportingSource.DateReportedLocal as date -> encounter.period as period, period.start = date "set date";
*/
}
